;; Variables


(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(deflisten workspace "scripts/workspace")
(defpoll wlan-status :interval "2s" "nmcli g | grep -v STATE| awk '{print ($1)}'")
(defpoll wlan-essid :interval "2s" "nmcli d | grep wlan0 | awk '{print ($4)}'")
(defpoll time :interval "5ms" "date +\%T ")
(defpoll week :interval "2s" "date +\%U ")

(defpoll vol_perc :interval "5ms" "amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll bright_perc :interval "5ms" "brightnessctl | grep Current | awk -F'(' '{ print $2 }' | tr -d '%)'")

;; widgets
;;TODO:
;;	mem/cpu 
;;	battery 
;;	wlan 
;;	volume/brightness 


(defwidget workspaces []
  (literal 
    :content workspace))

(defwidget time []
  (box :orientation "horizontal"
       :halign "end"
       :class "time"
       :tooltip "${EWW_BATTERY.BAT0.capacity}%"
       :space-evenly false
time " | KW: " week
;;(button :onclick "notify-send 'Hi' '${EWW_NET}'""Click")
))

(defwidget bat []
      (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                :class "bat"
                :thickness 4
            (label :text "󱐋"
                :class "bat_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_BATTERY.BAT0.capacity}%")))

(defwidget mem []
      (circular-progress :value {EWW_RAM.used_mem_perc}
                :class "mem"
                :thickness 4
	(label :text "󰘚"
                :class "mem_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_RAM.used_mem_perc}%")))

(defwidget cpu []
      (circular-progress :value {EWW_CPU.avg}
                :class "cpu"
                :thickness 4
	(label :text ""
                :class "cpu_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_CPU.avg}%")))

(defwidget vol []
  (box :class "volbar" :orientation "v" :spacing 1 :space-evenly "false" :valign "center"
    (label :class "volume_icon"
    :text " ")
    (scale :min 0 :max 100 :value vol_perc :active "true"  :onchange "amixer sset Master {}%")))

(defwidget bright []
  (box :class "brightbar" :orientation "v" :spacing 1 :space-evenly "false" :valign "center"
    (label :class "bright_icon" :text "󰃠 ")
    (scale :min 0 :max 100 :value bright_perc :active "true"  :onchange "amixer sset Master {}%")))


(defvar wifi_rev false)
(defwidget wifi [] 
  (eventbox 
    :onhover "${EWW_CMD} update wifi_rev=true"
	:onhoverlost "${EWW_CMD} update wifi_rev=false"
	(box
	    :vexpand "false"
	    :hexpand "false"
	    :space-evenly "false"
		(label
		    :class "module-wif"
		    :text {wlan-status == "connected" ? "󰤨" : "n"})
		    (revealer
	        :transition "slideleft"
		      :reveal wifi_rev
			    :duration "350ms"
		(label
	          :class "module_essid"
			      :text wlan-essid)
	       ))))


;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (workspaces)))

(defwidget right []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (wifi)(bright)(vol)(cpu)(mem)(bat)(time)))

;;Define bar
(defwindow bar0
    :exclusive false
    :monitor 0
    :geometry (geometry 
        :x "10px"
        :y "5px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :exclusive "true"
    :windowtype "dock"
    (box :orientation "h"
    (left)(right)))
