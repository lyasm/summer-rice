;; Variables


(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(deflisten workspace "scripts/workspace")
(defpoll wlan-status :interval "2s" "scripts/wlan -stat")
(defpoll wlan-essid :interval "2s" "scripts/wlan --ESSID")
(defpoll time :interval "5ms" "date +\%T ")
(defpoll week :interval "2s" "date +\%U ")

(defpoll volume_percent :interval "3s" "amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")


;; widgets
;;TODO:
;;	mem/cpu gr aph
;;	battery 
;;	wlan
;;	volume/brightness


(defwidget workspaces []
  (literal 
    :content workspace))

(defwidget time []
  (box :orientation "horizontal"
       :halign "end"
       :class "time"
       :tooltip "${EWW_BATTERY.BAT0.capacity}%"
       :space-evenly false
time " | KW: " week
;;(button :onclick "notify-send 'Hi' '${EWW_NET}'""Click")
))

(defwidget bat []
      (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                :class "bat"
                :thickness 4
            (label :text "󱐋"
                :class "bat_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_BATTERY.BAT0.capacity}%")))

(defwidget mem []
      (circular-progress :value {EWW_RAM.used_mem_perc}
                :class "mem"
                :thickness 4
	(label :text "󰘚"
                :class "mem_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_RAM.used_mem_perc}%")))

(defwidget cpu []
      (circular-progress :value {EWW_CPU.avg}
                :class "cpu"
                :thickness 4
	(label :text ""
                :class "cpu_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
		:tooltip "${EWW_CPU.avg}%")))


(defwidget vol []
	(button   :onclick ""   :class "volume_icon" "")
	(scale    :class "volbar"
			  :value volume_percent
			  :orientation "h"
			  :tooltip "${volume_percent}%"
			  :max 100
			  :min 0
			  :onchange "amixer -D pulse sset Master {}%" ))



;;define widget groups
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (workspaces)))

(defwidget right []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (vol)(cpu)(mem)(bat)(time)))

;;Define bar
(defwindow bar0
    :exclusive false
    :monitor 0
    :geometry (geometry 
        :x "10px"
        :y "5px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :exclusive "true"
    :windowtype "dock"
    (box :orientation "h"
    (left)(right)))

(defwindow bal
    :exclusive false
    :monitor 0
    :geometry (geometry 
        :x "10px"
        :y "5px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :exclusive "true"
    :windowtype "dock"
  (test))